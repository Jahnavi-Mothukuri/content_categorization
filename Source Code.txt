# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

# Load data
df = pd.read_csv('YouTube Titles and description using youtube api.csv')

# Drop rows where 'Description' is NaN
df = df.dropna(subset=['Description'])

# Check the distribution of categories
print(df['Category'].value_counts())

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(df['Description'], df['Category'], test_size=0.2, random_state=42)

# Initialize TF-IDF vectorizer
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)

# Fit and transform the train set, transform test set
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Initialize Logistic Regression classifier
clf = LogisticRegression(max_iter=1000)

# Fit the classifier
clf.fit(X_train_vec, y_train)

# Get feature names from the TF-IDF vectorizer
feature_names = np.array(vectorizer.get_feature_names_out())

# Get the top features for each class
for i, category in enumerate(clf.classes_):
    top_features_idx = clf.coef_[i].argsort()[-10:]
    top_features = feature_names[top_features_idx]
    print(f"Top features for category '{category}':")
    print(top_features)
    print("="*30)

# Predict on the testing data
y_pred = clf.predict(X_test_vec)

# Print classification report
print(classification_report(y_test, y_pred))

def predict_category(input_text):
    # Transform the input text
    text_vec = vectorizer.transform([input_text])
    
    # Predict category
    prediction = clf.predict(text_vec)
    
    return prediction[0]

# Take input from user
input_text = input("Enter the text to predict its category: ")
predicted_category = predict_category(input_text)
print(f"\nPredicted Category for the input text '{input_text}': {predicted_category}")

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=clf.classes_, yticklabels=clf.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()
